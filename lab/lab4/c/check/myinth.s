; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_myinth_1:
	DB	0x54,0x49,0x43,0x4b,0x20
L_myinth_2:
	DB	0x4b,0x45,0x59,0x50,0x52,0x45,0x53,0x53,0x20,0x28
L_myinth_3:
	DB	0x29,0x20,0x49,0x47,0x4e,0x4f,0x52,0x45,0x44
L_myinth_4:
	DB	0x44,0x45,0x4c,0x41,0x59,0x20,0x4b,0x45,0x59,0x20,0x50,0x52
	DB	0x45,0x53,0x53,0x45,0x44
L_myinth_5:
	DB	0x44,0x45,0x4c,0x41,0x59,0x20,0x43,0x4f,0x4d,0x50,0x4c,0x45
	DB	0x54,0x45
	ALIGN	2
resetHandler:
	; >>>>> Line:	12
	; >>>>> void resetHandler() { 
	jmp	L_myinth_6
L_myinth_7:
	; >>>>> Line:	14
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_6:
	push	bp
	mov	bp, sp
	jmp	L_myinth_7
L_myinth_9:
	DB	0xA,"Tick ",0
	ALIGN	2
tickHandler:
	; >>>>> Line:	18
	; >>>>> void tickHandler() { 
	jmp	L_myinth_10
L_myinth_11:
	; >>>>> Line:	20
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	21
	; >>>>> YKTickCounter++; 
	inc	word [YKTickCounter]
	; >>>>> Line:	22
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	23
	; >>>>> printString("\nTick "); 
	mov	ax, L_myinth_9
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	24
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	25
	; >>>>> printInt(YKTickCounter); 
	push	word [YKTickCounter]
	call	printInt
	add	sp, 2
	; >>>>> Line:	26
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	27
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	28
	; >>>>> YKTickHandler(); 
	call	YKTickHandler
L_myinth_12:
	; >>>>> Line:	29
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_myinth_10:
	push	bp
	mov	bp, sp
	jmp	L_myinth_11
	ALIGN	2
keyboardHandler:
	; >>>>> Line:	33
	; >>>>> void keyboardHandler() { 
	jmp	L_myinth_14
L_myinth_15:
	; >>>>> Line:	37
	; >>>>> if (KeyBuffer == 'd') { 
	cmp	word [KeyBuffer], 100
	jne	L_myinth_16
	; >>>>> Line:	38
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	39
	; >>>>> print(delay, 17); 
	mov	ax, 17
	push	ax
	mov	ax, L_myinth_4
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	40
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	42
	; >>>>> for (i = 0; i < 5000; i++); 
	mov	word [bp-2], 0
	jmp	L_myinth_18
L_myinth_17:
L_myinth_20:
	inc	word [bp-2]
L_myinth_18:
	cmp	word [bp-2], 5000
	jl	L_myinth_17
L_myinth_19:
	; >>>>> Line:	44
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	45
	; >>>>> print(complete, 14); 
	mov	ax, 14
	push	ax
	mov	ax, L_myinth_5
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	46
	; >>>>> printNewLine(); 
	call	printNewLine
	jmp	L_myinth_21
L_myinth_16:
	; >>>>> Line:	49
	; >>>>> printNewLin 
	call	printNewLine
	; >>>>> Line:	50
	; >>>>> print(keypress, 10); 
	mov	ax, 10
	push	ax
	mov	ax, L_myinth_2
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	51
	; >>>>> printChar((char) KeyBuffer); 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	52
	; >>>>> print(ignored, 9); 
	mov	ax, 9
	push	ax
	mov	ax, L_myinth_3
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	53
	; >>>>> printNewLine(); 
	call	printNewLine
L_myinth_21:
L_myinth_22:
	; >>>>> Line:	56
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_myinth_14:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_15
