        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      RESET 		; Reset     ; Int 08h (IRQ 0)
        dd      TICK 		; Tick      ; Int 09h (IRQ 1)
        dd      KEYBOARD 	; Keyboard  ; Int 0Ah (IRQ 2)
        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      TRAP                    ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84

RESET:

		push 	ax
		push 	bx
		push 	cx
		push 	dx
		push 	di
		push 	si
		push 	ds
		push 	es
		push 	bp
		mov		si, [currentTask]
		add		si, word 0x4
		mov 		[si], sp

		call		YKEnterISR
		
		sti					;enabling interrupts
		call 	resetHandler	;calling C interrupt handler
		cli					;disabling interrupts
		
		mov		al, 0x20		;Load nonspecific EOI value (0x20) into register al
		out		0x20, al		;Write EOI to PIC (port 0x20)

		call 	YKExitISR

		pop		bp
		pop		es
		pop		ds
		pop		si
		pop		di
		pop		dx
		pop		cx
		pop		bx
		pop		ax	

		iret					;returning from ISR

TICK:

		push 	ax
		push 	bx
		push 	cx
		push 	dx
		push 	di
		push 	si
		push 	ds
		push 	es
		push 	bp
		mov		si, [currentTask]
		add		si, word 0x4
		mov 		[si], sp

		call	YKEnterISR

		sti					;enabling interrupts
		call	tickHandler		;calling C interrupt handler
		cli					;disabling interrupts

		mov 	al, 0x20			;Load nonspecific EOI value (0x20) into register al
		out		0x20, al		;Write EOI to PIC (port 0x20)

		call	YKExitISR

		pop		bp
		pop		es
		pop		ds
		pop		si
		pop		di
		pop		dx
		pop		cx
		pop		bx
		pop		ax

		iret					;returning from ISR

KEYBOARD:

		push 	ax
		push 	bx
		push 	cx
		push 	dx
		push 	di
		push 	si
		push 	ds
		push 	es
		push 	bp
		mov		si, [currentTask]
		add		si, word 0x4
		mov 		[si], sp	
		
		call	YKEnterISR
		
		sti						;enabling interrupts
		call	keyboardHandler ;calling C interrupt handler
		cli						;disabling interrupts

		mov     al, 0x20		;Load nonspecific EOI value (0x20) into register al
		out		0x20, al		;Write EOI to PIC (port 0x20)

		call	YKExitISR

		pop		bp
		pop		es
		pop		ds
		pop		si
		pop		di
		pop		dx
		pop		cx
		pop		bx
		pop		ax

		iret					;returning from ISR

TRAP:

		push 	ax
		push 	bx
		push 	cx
		push 	dx
		push 	di
		push 	si
		push 	ds
		push 	es
		push 	bp
		mov		si, [currentTask]
		add		si, word 0x4
		mov 		[si], sp

		call 	YKEnterISR

		mov 		al, 0x20
		out		0x20, al

		call		YKExitISR

		pop		bp
		pop		es
		pop		ds
		pop		si
		pop		di
		pop		dx
		pop		cx
		pop		bx
		pop		ax

		iret

YKDispatcher:

		cli
		push 	bp
		mov		bp, sp		

		mov		bx, [bp+4]	;Obtain stack pointer from TCB
		mov		sp, [bx+4]	;Load stack pointer into SP

		pop		bp
		pop		es
		pop		ds
		pop		si
		pop		di
		pop		dx
		pop		cx
		pop		bx
		pop		ax

		iret

; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_myinth_1:
	DB	0x54,0x49,0x43,0x4b,0x20
L_myinth_2:
	DB	0x4b,0x45,0x59,0x50,0x52,0x45,0x53,0x53,0x20,0x28
L_myinth_3:
	DB	0x29,0x20,0x49,0x47,0x4e,0x4f,0x52,0x45,0x44
L_myinth_4:
	DB	0x44,0x45,0x4c,0x41,0x59,0x20,0x4b,0x45,0x59,0x20,0x50,0x52
	DB	0x45,0x53,0x53,0x45,0x44
L_myinth_5:
	DB	0x44,0x45,0x4c,0x41,0x59,0x20,0x43,0x4f,0x4d,0x50,0x4c,0x45
	DB	0x54,0x45
	ALIGN	2
resetHandler:
	; >>>>> Line:	12
	; >>>>> void resetHandler() { 
	jmp	L_myinth_6
L_myinth_7:
	; >>>>> Line:	14
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_6:
	push	bp
	mov	bp, sp
	jmp	L_myinth_7
L_myinth_9:
	DB	0xA,"Tick ",0
	ALIGN	2
tickHandler:
	; >>>>> Line:	18
	; >>>>> void tickHandler() { 
	jmp	L_myinth_10
L_myinth_11:
	; >>>>> Line:	20
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	21
	; >>>>> YKTickCounter++; 
	inc	word [YKTickCounter]
	; >>>>> Line:	22
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	23
	; >>>>> printString("\nTick "); 
	mov	ax, L_myinth_9
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	24
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	25
	; >>>>> printInt(YKTickCounter); 
	push	word [YKTickCounter]
	call	printInt
	add	sp, 2
	; >>>>> Line:	26
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	27
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	28
	; >>>>> YKTickHandler(); 
	call	YKTickHandler
L_myinth_12:
	; >>>>> Line:	29
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_myinth_10:
	push	bp
	mov	bp, sp
	jmp	L_myinth_11
	ALIGN	2
keyboardHandler:
	; >>>>> Line:	33
	; >>>>> void keyboardHandler() { 
	jmp	L_myinth_14
L_myinth_15:
	; >>>>> Line:	37
	; >>>>> if (KeyBuffer == 'd') { 
	cmp	word [KeyBuffer], 100
	jne	L_myinth_16
	; >>>>> Line:	38
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	39
	; >>>>> print(delay, 17); 
	mov	ax, 17
	push	ax
	mov	ax, L_myinth_4
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	40
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	42
	; >>>>> for (i = 0; i < 5000; i++); 
	mov	word [bp-2], 0
	jmp	L_myinth_18
L_myinth_17:
L_myinth_20:
	inc	word [bp-2]
L_myinth_18:
	cmp	word [bp-2], 5000
	jl	L_myinth_17
L_myinth_19:
	; >>>>> Line:	44
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	45
	; >>>>> print(complete, 14); 
	mov	ax, 14
	push	ax
	mov	ax, L_myinth_5
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	46
	; >>>>> printNewLine(); 
	call	printNewLine
	jmp	L_myinth_21
L_myinth_16:
	; >>>>> Line:	49
	; >>>>> printNewLin 
	call	printNewLine
	; >>>>> Line:	50
	; >>>>> print(keypress, 10); 
	mov	ax, 10
	push	ax
	mov	ax, L_myinth_2
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	51
	; >>>>> printChar((char) KeyBuffer); 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	52
	; >>>>> print(ignored, 9); 
	mov	ax, 9
	push	ax
	mov	ax, L_myinth_3
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	53
	; >>>>> printNewLine(); 
	call	printNewLine
L_myinth_21:
L_myinth_22:
	; >>>>> Line:	56
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_myinth_14:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_15
; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKCtxSwCount:
	DW	0
YKIdleCount:
	DW	0
YKTickCounter:
	DW	0
L_yakc_1:
	DW	0
L_yakc_4:
	DW	0
	ALIGN	2
YKEnterMutex:
	; >>>>> Line:	25
	; >>>>> void YKEnterMutex(void) { 
	jmp	L_yakc_5
L_yakc_6:
	; >>>>> Line:	28
	; >>>>> asm("cli"); 
	cli
	mov	sp, bp
	pop	bp
	ret
L_yakc_5:
	push	bp
	mov	bp, sp
	jmp	L_yakc_6
	ALIGN	2
YKExitMutex:
	; >>>>> Line:	32
	; >>>>> void YKExitMutex(void) { 
	jmp	L_yakc_8
L_yakc_9:
	; >>>>> Line:	35
	; >>>>> asm("sti"); 
	sti
	mov	sp, bp
	pop	bp
	ret
L_yakc_8:
	push	bp
	mov	bp, sp
	jmp	L_yakc_9
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	39
	; >>>>> void YKEnterISR(void) { 
	jmp	L_yakc_11
L_yakc_12:
	; >>>>> Line:	41
	; >>>>> ISRCallDepth++; 
	inc	word [L_yakc_1]
	mov	sp, bp
	pop	bp
	ret
L_yakc_11:
	push	bp
	mov	bp, sp
	jmp	L_yakc_12
	ALIGN	2
YKExitISR:
	; >>>>> Line:	45
	; >>>>> void YKExitISR(void) { 
	jmp	L_yakc_14
L_yakc_15:
	; >>>>> Line:	47
	; >>>>> ISRCallDepth--; 
	dec	word [L_yakc_1]
	; >>>>> Line:	48
	; >>>>> if (ISRCallDepth == 0) YKScheduler(); 
	mov	ax, word [L_yakc_1]
	test	ax, ax
	jne	L_yakc_16
	; >>>>> Line:	48
	; >>>>> if (ISRCallDepth == 0) YKScheduler(); 
	call	YKScheduler
L_yakc_16:
	mov	sp, bp
	pop	bp
	ret
L_yakc_14:
	push	bp
	mov	bp, sp
	jmp	L_yakc_15
	ALIGN	2
YKInitialize:
	; >>>>> Line:	52
	; >>>>> void YKInitialize(void) { 
	jmp	L_yakc_18
L_yakc_19:
	; >>>>> Line:	54
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	57
	; >>>>> initializeReadyQueue(); 
	call	initializeReadyQueue
	; >>>>> Line:	58
	; >>>>> initializeDelayQueue(); 
	call	initializeDelayQueue
	; >>>>> Line:	61
	; >>>>> taskBlock.nextFreeTCB == 0; 
	mov	ax, word [(70+L_yakc_2)]
	test	ax, ax
	je	L_yakc_20
	xor	ax, ax
	jmp	L_yakc_21
L_yakc_20:
	mov	ax, 1
L_yakc_21:
	; >>>>> Line:	65
	; >>>>> YKNewTask(YKIdleTask, &idleTaskStack[10], 100); 
	mov	al, 100
	push	ax
	mov	ax, (L_yakc_3+20)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	68
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_22:
	; >>>>> Line:	69
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yakc_18:
	push	bp
	mov	bp, sp
	jmp	L_yakc_19
L_yakc_24:
	DB	"IdleTask ran",0xA,0
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	73
	; >>>>> void YKIdleTask(void) { 
	jmp	L_yakc_25
L_yakc_26:
	; >>>>> Line:	75
	; >>>>> printString("IdleTas 
	mov	ax, L_yakc_24
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	77
	; >>>>> while (1) { 
	jmp	L_yakc_28
L_yakc_27:
	; >>>>> Line:	78
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	79
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	80
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_28:
	jmp	L_yakc_27
L_yakc_29:
	mov	sp, bp
	pop	bp
	ret
L_yakc_25:
	push	bp
	mov	bp, sp
	jmp	L_yakc_26
	ALIGN	2
YKScheduler:
	; >>>>> Line:	85
	; >>>>> void YKScheduler(void) { 
	jmp	L_yakc_31
L_yakc_32:
	; >>>>> Line:	89
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	90
	; >>>>> if (kernelState == K_BLOCKED) return; 
	mov	ax, word [L_yakc_4]
	test	ax, ax
	jne	L_yakc_33
	; >>>>> Line:	90
	; >>>>> if (kernelState == K_BLOCKED) return; 
	jmp	L_yakc_34
L_yakc_33:
	; >>>>> Line:	91
	; >>>>> readyTask = peekReadyQueue(); 
	call	peekReadyQueue
	mov	word [bp-2], ax
	; >>>>> Line:	92
	; >>>>> if (readyTask == 0) exit(2); 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_35
	; >>>>> Line:	92
	; >>>>> if (readyTask == 0) exit(2); 
	mov	al, 2
	push	ax
	call	exit
	add	sp, 2
L_yakc_35:
	; >>>>> Line:	93
	; >>>>> if (readyTask != currentTask) { 
	mov	ax, word [currentTask]
	cmp	ax, word [bp-2]
	je	L_yakc_36
	; >>>>> Line:	94
	; >>>>> currentTask->state = T_READY; 
	mov	si, word [currentTask]
	add	si, 6
	mov	word [si], 1
	; >>>>> Line:	95
	; >>>>> currentTask = readyTask; 
	mov	ax, word [bp-2]
	mov	word [currentTask], ax
	; >>>>> Line:	96
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	97
	; >>>>> readyTask->state = T_RUNNING; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 2
	; >>>>> Line:	98
	; >>>>> YKDispatcher(readyTask); 
	push	word [bp-2]
	call	YKDispatcher
	add	sp, 2
	; >>>>> Line:	99
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	100
	; >>>>> return; 
	jmp	L_yakc_34
L_yakc_36:
	; >>>>> Line:	102
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_34:
	; >>>>> Line:	103
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yakc_31:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_32
	ALIGN	2
YKNewTask:
	; >>>>> Line:	106
	; >>>>> ], cx"); 
	jmp	L_yakc_38
L_yakc_39:
	; >>>>> Line:	114
	; >>>>> newTask = getNewTCB(); 
	call	getNewTCB
	mov	word [bp-2], ax
	; >>>>> Line:	115
	; >>>>> if (newTask == 0) exit(1); 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_40
	; >>>>> Line:	115
	; >>>>> if (newTask == 0) exit(1); 
	mov	al, 1
	push	ax
	call	exit
	add	sp, 2
L_yakc_40:
	; >>>>> Line:	119
	; >>>>> newTask->tid = 0; 
	mov	si, word [bp-2]
	mov	word [si], 0
	; >>>>> Line:	120
	; >>>>> newTask->priority = priority; 
	mov	si, word [bp-2]
	add	si, 2
	mov	al, byte [bp+8]
	mov	byte [si], al
	; >>>>> Line:	121
	; >>>>> newTask->stackPointer = ((void*)((int*) taskStack - 12)); 
	mov	ax, word [bp+6]
	sub	ax, 24
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	122
	; >>>>> newTask->state = T_READY; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 1
	; >>>>> Line:	123
	; >>>>> newTask->delayCount = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	124
	; >>>>> newTask->next = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	125
	; >>>>> newTask->prev = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	129
	; >>>>> asm("push bx"); 
	push bx
	; >>>>> Line:	130
	; >>>>> asm("push cx"); 
	push cx
	; >>>>> Line:	131
	; >>>>> asm("mov bx, [bp+6]"); 
	mov bx, [bp+6]
	; >>>>> Line:	132
	; >>>>> asm("mov cx, [bp+4]"); 
	mov cx, [bp+4]
	; >>>>> Line:	133
	; >>>>> asm("mov [bx-2], word 0x0200"); 
	mov [bx-2], word 0x0200
	; >>>>> Line:	134
	; >>>>> asm("mov [bx-4], word 0x0"); 
	mov [bx-4], word 0x0
	; >>>>> Line:	135
	; >>>>> asm("mov [bx-6], cx"); 
	mov [bx-6], cx
	; >>>>> Line:	136
	; >>>>> asm("pop cx"); 
	pop cx
	; >>>>> Line:	137
	; >>>>> asm("po 
	pop bx
	; >>>>> Line:	141
	; >>>>> insertReadyQueue(newTask); 
	push	word [bp-2]
	call	insertReadyQueue
	add	sp, 2
	; >>>>> Line:	143
	; >>>>> asm("int 0x20"); 
	int 0x20
L_yakc_41:
	; >>>>> Line:	144
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yakc_38:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_39
	ALIGN	2
getNewTCB:
	; >>>>> Line:	148
	; >>>>> TCB* getNewTCB(void) { 
	jmp	L_yakc_43
L_yakc_44:
	; >>>>> Line:	151
	; >>>>> if (taskBlock.nextFreeTCB < 4 + 1) { 
	cmp	word [(70+L_yakc_2)], 5
	jae	L_yakc_45
	; >>>>> Line:	152
	; >>>>> task = &taskBlock.TCBPool[taskBlock.nextFreeTCB]; 
	mov	ax, word [(70+L_yakc_2)]
	mov	cx, 14
	imul	cx
	add	ax, L_yakc_2
	mov	word [bp-2], ax
	; >>>>> Line:	153
	; >>>>> taskBlock.nextFreeTCB++; 
	inc	word [(70+L_yakc_2)]
	; >>>>> Line:	154
	; >>>>> return task; 
	mov	ax, word [bp-2]
	jmp	L_yakc_46
	jmp	L_yakc_47
L_yakc_45:
	; >>>>> Line:	156
	; >>>>> return 0; 
	xor	ax, ax
L_yakc_47:
L_yakc_46:
	mov	sp, bp
	pop	bp
	ret
L_yakc_43:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_44
	ALIGN	2
YKRun:
	; >>>>> Line:	161
	; >>>>> void YKRun(void) { 
	jmp	L_yakc_49
L_yakc_50:
	; >>>>> Line:	163
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	164
	; >>>>> kernelState = K_RUNNING; 
	mov	word [L_yakc_4], 1
	; >>>>> Line:	165
	; >>>>> YKScheduler(); 
	call	YKScheduler
	; >>>>> Line:	166
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_51:
	; >>>>> Line:	167
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yakc_49:
	push	bp
	mov	bp, sp
	jmp	L_yakc_50
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	171
	; >>>>> void YKDelayTask(unsigned int count) { 
	jmp	L_yakc_53
L_yakc_54:
	; >>>>> Line:	175
	; >>>>> if (count == 0) return; 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_55
	; >>>>> Line:	175
	; >>>>> if (count == 0) return; 
	jmp	L_yakc_56
L_yakc_55:
	; >>>>> Line:	177
	; >>>>> currentTask->state = T_BLOCKED; 
	mov	si, word [currentTask]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	178
	; >>>>> currentT 
	mov	si, word [currentTask]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	179
	; >>>>> delayedTask = removeReadyQueue(); 
	call	removeReadyQueue
	mov	word [bp-2], ax
	; >>>>> Line:	180
	; >>>>> insertDelayQueue(delayedTask); 
	push	word [bp-2]
	call	insertDelayQueue
	add	sp, 2
	; >>>>> Line:	181
	; >>>>> asm("int 0x20"); 
	int 0x20
L_yakc_56:
	; >>>>> Line:	182
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yakc_53:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_54
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	186
	; >>>>> void YKTickHandler(void) { 
	jmp	L_yakc_58
L_yakc_59:
	; >>>>> Line:	188
	; >>>>> tickClock(); 
	call	tickClock
	mov	sp, bp
	pop	bp
	ret
L_yakc_58:
	push	bp
	mov	bp, sp
	jmp	L_yakc_59
	ALIGN	2
currentTask:
	TIMES	2 db 0
readyQueue:
	TIMES	6 db 0
delayQueue:
	TIMES	4 db 0
L_yakc_2:
	TIMES	72 db 0
L_yakc_3:
	TIMES	20 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from ReadyQueue.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
initializeReadyQueue:
	; >>>>> Line:	7
	; >>>>> void initializeReadyQueue() { 
	jmp	L_ReadyQueue_1
L_ReadyQueue_2:
	; >>>>> Line:	8
	; >>>>> readyQueue.size = 0; 
	mov	word [(4+readyQueue)], 0
	; >>>>> Line:	9
	; >>>>> readyQueue.head = 0; 
	mov	word [readyQueue], 0
	; >>>>> Line:	10
	; >>>>> readyQueue.tail = 0; 
	mov	word [(2+readyQueue)], 0
	mov	sp, bp
	pop	bp
	ret
L_ReadyQueue_1:
	push	bp
	mov	bp, sp
	jmp	L_ReadyQueue_2
	ALIGN	2
insertReadyQueue:
	; >>>>> Line:	13
	; >>>>> void insertReadyQueue(TCB* tcb) { 
	jmp	L_ReadyQueue_4
L_ReadyQueue_5:
	; >>>>> Line:	17
	; >>>>> if(tcb == 0) return; 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_ReadyQueue_6
	; >>>>> Line:	17
	; >>>>> if(tcb == 0) return; 
	jmp	L_ReadyQueue_7
L_ReadyQueue_6:
	; >>>>> Line:	20
	; >>>>> if (readyQueue.size == 0) { 
	mov	ax, word [(4+readyQueue)]
	test	ax, ax
	jne	L_ReadyQueue_8
	; >>>>> Line:	21
	; >>>>> readyQueue.head = tcb; 
	mov	ax, word [bp+4]
	mov	word [readyQueue], ax
	; >>>>> Line:	22
	; >>>>> readyQueue.tail = tcb; 
	mov	word [(2+readyQueue)], ax
	; >>>>> Line:	23
	; >>>>> tcb->next = 0; 
	mov	si, word [bp+4]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	24
	; >>>>> tcb->prev = 0; 
	mov	si, word [bp+4]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	25
	; >>>>> readyQueue.size = 1; 
	mov	word [(4+readyQueue)], 1
	; >>>>> Line:	29
	; >>>>> return; 
	jmp	L_ReadyQueue_7
L_ReadyQueue_8:
	; >>>>> Line:	33
	; >>>>> if (readyQueue.size == 1) { 
	cmp	word [(4+readyQueue)], 1
	jne	L_ReadyQueue_9
	; >>>>> Line:	34
	; >>>>> if (readyQueue.head->priority < tcb->priority) { 
	mov	si, word [readyQueue]
	add	si, 2
	mov	di, word [bp+4]
	add	di, 2
	mov	al, byte [di]
	cmp	al, byte [si]
	jbe	L_ReadyQueue_10
	; >>>>> Line:	35
	; >>>>> readyQueue.head->next = tcb; 
	mov	si, word [readyQueue]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	36
	; >>>>> tcb->prev = readyQueue.head; 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [readyQueue]
	mov	word [si], ax
	; >>>>> Line:	37
	; >>>>> tcb->next = 0; 
	mov	si, word [bp+4]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	38
	; >>>>> readyQueue.tail = tcb; 
	mov	ax, word [bp+4]
	mov	word [(2+readyQueue)], ax
	; >>>>> Line:	39
	; >>>>> readyQueue.size++; 
	inc	word [(4+readyQueue)]
	; >>>>> Line:	40
	; >>>>> return; 
	jmp	L_ReadyQueue_7
	jmp	L_ReadyQueue_11
L_ReadyQueue_10:
	; >>>>> Line:	42
	; >>>>> tcb->next = readyQueue.head; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [readyQueue]
	mov	word [si], ax
	; >>>>> Line:	43
	; >>>>> tcb->prev = 0; 
	mov	si, word [bp+4]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	44
	; >>>>> readyQueue.tail->prev = tcb; 
	mov	si, word [(2+readyQueue)]
	add	si, 12
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	45
	; >>>>> readyQueue.head = tcb; 
	mov	ax, word [bp+4]
	mov	word [readyQueue], ax
	; >>>>> Line:	46
	; >>>>> readyQueue.size++; 
	inc	word [(4+readyQueue)]
	; >>>>> Line:	50
	; >>>>> return; 
	jmp	L_ReadyQueue_7
L_ReadyQueue_11:
L_ReadyQueue_9:
	; >>>>> Line:	56
	; >>>>> temp = readyQueue.head; 
	mov	ax, word [readyQueue]
	mov	word [bp-2], ax
	; >>>>> Line:	57
	; >>>>> while (temp != 0) { 
	jmp	L_ReadyQueue_13
L_ReadyQueue_12:
	; >>>>> Line:	58
	; >>>>> if (temp->priority > tcb->priority) { 
	mov	si, word [bp-2]
	add	si, 2
	mov	di, word [bp+4]
	add	di, 2
	mov	al, byte [di]
	cmp	al, byte [si]
	jae	L_ReadyQueue_15
	; >>>>> Line:	59
	; >>>>> tcb->next = temp; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	60
	; >>>>> tcb->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 12
	mov	di, word [bp+4]
	add	di, 12
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	61
	; >>>>> temp->prev = tcb; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	62
	; >>>>> if (temp == readyQueue.head) readyQueue.head = tcb; 
	mov	ax, word [readyQueue]
	cmp	ax, word [bp-2]
	jne	L_ReadyQueue_16
	; >>>>> Line:	62
	; >>>>> if (temp == readyQueue.head) readyQueue.head = tcb; 
	mov	ax, word [bp+4]
	mov	word [readyQueue], ax
L_ReadyQueue_16:
	; >>>>> Line:	63
	; >>>>> readyQueue.size++; 
	inc	word [(4+readyQueue)]
	; >>>>> Line:	64
	; >>>>> retValu 
	jmp	L_ReadyQueue_7
L_ReadyQueue_15:
	; >>>>> Line:	66
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-2], ax
L_ReadyQueue_13:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_ReadyQueue_12
L_ReadyQueue_14:
	; >>>>> Line:	70
	; >>>>> readyQueue.tail->next = tcb; 
	mov	si, word [(2+readyQueue)]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	71
	; >>>>> tcb->prev = readyQueue.tail; 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [(2+readyQueue)]
	mov	word [si], ax
	; >>>>> Line:	72
	; >>>>> readyQueue.tail = tcb; 
	mov	ax, word [bp+4]
	mov	word [(2+readyQueue)], ax
	; >>>>> Line:	73
	; >>>>> tcb->next = 0; 
	mov	si, word [bp+4]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	74
	; >>>>> readyQueue.size++; 
	inc	word [(4+readyQueue)]
L_ReadyQueue_7:
	; >>>>> Line:	75
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_ReadyQueue_4:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_ReadyQueue_5
	ALIGN	2
peekReadyQueue:
	; >>>>> Line:	79
	; >>>>> TCB* peekReadyQueue() { 
	jmp	L_ReadyQueue_18
L_ReadyQueue_19:
	; >>>>> Line:	81
	; >>>>> if (readyQueue.size == 0) { 
	mov	ax, word [(4+readyQueue)]
	test	ax, ax
	jne	L_ReadyQueue_20
	; >>>>> Line:	82
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_ReadyQueue_21
	jmp	L_ReadyQueue_22
L_ReadyQueue_20:
	; >>>>> Line:	84
	; >>>>> return readyQueue.head; 
	mov	ax, word [readyQueue]
L_ReadyQueue_22:
L_ReadyQueue_21:
	mov	sp, bp
	pop	bp
	ret
L_ReadyQueue_18:
	push	bp
	mov	bp, sp
	jmp	L_ReadyQueue_19
	ALIGN	2
removeReadyQueue:
	; >>>>> Line:	89
	; >>>>> TCB* removeReadyQueue() { 
	jmp	L_ReadyQueue_24
L_ReadyQueue_25:
	; >>>>> Line:	94
	; >>>>> if (readyQueue.size == 0) { 
	mov	ax, word [(4+readyQueue)]
	test	ax, ax
	jne	L_ReadyQueue_26
	; >>>>> Line:	95
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_ReadyQueue_27
L_ReadyQueue_26:
	; >>>>> Line:	99
	; >>>>> if (readyQueue.size == 1) { 
	cmp	word [(4+readyQueue)], 1
	jne	L_ReadyQueue_28
	; >>>>> Line:	102
	; >>>>> retValue = readyQueue.head; 
	mov	ax, word [readyQueue]
	mov	word [bp-2], ax
	; >>>>> Line:	103
	; >>>>> readyQueue.size--; 
	dec	word [(4+readyQueue)]
	; >>>>> Line:	104
	; >>>>> readyQueue.head = 0; 
	mov	word [readyQueue], 0
	; >>>>> Line:	105
	; >>>>> readyQueue.tail = 0; 
	mov	word [(2+readyQueue)], 0
	; >>>>> Line:	106
	; >>>>> return retValu 
	mov	ax, word [bp-2]
	jmp	L_ReadyQueue_27
L_ReadyQueue_28:
	; >>>>> Line:	112
	; >>>>> retValue = readyQueue.head; 
	mov	ax, word [readyQueue]
	mov	word [bp-2], ax
	; >>>>> Line:	113
	; >>>>> readyQueue.head = readyQueue.head->next; 
	mov	si, word [readyQueue]
	add	si, 10
	mov	ax, word [si]
	mov	word [readyQueue], ax
	; >>>>> Line:	114
	; >>>>> readyQueue.size--; 
	dec	word [(4+readyQueue)]
	; >>>>> Line:	115
	; >>>>> retValue->next = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	116
	; >>>>> retValue->prev = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	117
	; >>>>> return retValue; 
	mov	ax, word [bp-2]
L_ReadyQueue_27:
	mov	sp, bp
	pop	bp
	ret
L_ReadyQueue_24:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_ReadyQueue_25
; Generated by c86 (BYU-NASM) 5.1 (beta) from DelayQueue.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
initializeDelayQueue:
	; >>>>> Line:	8
	; >>>>> void initializeDelayQueue() { 
	jmp	L_DelayQueue_1
L_DelayQueue_2:
	; >>>>> Line:	9
	; >>>>> delayQueue.size = 0; 
	mov	word [(2+delayQueue)], 0
	; >>>>> Line:	10
	; >>>>> delayQueue.head = 0; 
	mov	word [delayQueue], 0
	mov	sp, bp
	pop	bp
	ret
L_DelayQueue_1:
	push	bp
	mov	bp, sp
	jmp	L_DelayQueue_2
	ALIGN	2
tickClock:
	; >>>>> Line:	13
	; >>>>> gned  
	jmp	L_DelayQueue_4
L_DelayQueue_5:
	; >>>>> Line:	19
	; >>>>> if (delayQueue.size == 0) return; 
	mov	ax, word [(2+delayQueue)]
	test	ax, ax
	jne	L_DelayQueue_6
	; >>>>> Line:	19
	; >>>>> if (delayQueue.size == 0) return; 
	jmp	L_DelayQueue_7
L_DelayQueue_6:
	; >>>>> Line:	22
	; >>>>> current = delayQueue.head; 
	mov	ax, word [delayQueue]
	mov	word [bp-2], ax
	; >>>>> Line:	23
	; >>>>> while (current != 0) { 
	jmp	L_DelayQueue_9
L_DelayQueue_8:
	; >>>>> Line:	24
	; >>>>> current->delayCount--; 
	mov	si, word [bp-2]
	add	si, 8
	dec	word [si]
	; >>>>> Line:	25
	; >>>>> temp = current; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	26
	; >>>>> current = current->next; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	27
	; >>>>> if (temp->delayCount == 0) { 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	jne	L_DelayQueue_11
	; >>>>> Line:	29
	; >>>>> if (temp->next != 0) { 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_DelayQueue_12
	; >>>>> Line:	30
	; >>>>> temp->next->prev = 0; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 12
	mov	word [si], 0
L_DelayQueue_12:
	; >>>>> Line:	32
	; >>>>> delayQueue.head = temp->next; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	mov	word [delayQueue], ax
	; >>>>> Line:	33
	; >>>>> temp->next = 0; 
	mov	si, word [bp-4]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	34
	; >>>>> temp->prev = 0; 
	mov	si, word [bp-4]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	35
	; >>>>> delayQueue.size--; 
	dec	word [(2+delayQueue)]
	; >>>>> Line:	36
	; >>>>> insertReadyQueue(temp); 
	push	word [bp-4]
	call	insertReadyQueue
	add	sp, 2
L_DelayQueue_11:
L_DelayQueue_9:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_DelayQueue_8
L_DelayQueue_10:
L_DelayQueue_7:
	mov	sp, bp
	pop	bp
	ret
L_DelayQueue_4:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_DelayQueue_5
	ALIGN	2
insertDelayQueue:
	; >>>>> Line:	42
	; >>>>> void insertDelayQueue(TCB* tcb) { 
	jmp	L_DelayQueue_14
L_DelayQueue_15:
	; >>>>> Line:	47
	; >>>>> if (tcb == 0) return; 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_DelayQueue_16
	; >>>>> Line:	47
	; >>>>> if (tcb == 0) return; 
	jmp	L_DelayQueue_17
L_DelayQueue_16:
	; >>>>> Line:	50
	; >>>>> if (delayQueue.size == 0) { 
	mov	ax, word [(2+delayQueue)]
	test	ax, ax
	jne	L_DelayQueue_18
	; >>>>> Line:	51
	; >>>>> delayQueue.head = tcb; 
	mov	ax, word [bp+4]
	mov	word [delayQueue], ax
	; >>>>> Line:	52
	; >>>>> tcb->next = 0; 
	mov	si, word [bp+4]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	53
	; >>>>> tcb->prev = 0; 
	mov	si, word [bp+4]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	54
	; >>>>> delayQueue.size++; 
	inc	word [(2+delayQueue)]
	; >>>>> Line:	55
	; >>>>> return; 
	jmp	L_DelayQueue_17
L_DelayQueue_18:
	; >>>>> Line:	59
	; >>>>> current = delayQueue.head; 
	mov	ax, word [delayQueue]
	mov	word [bp-2], ax
	; >>>>> Line:	60
	; >>>>> sumCount = 0; 
	mov	word [bp-4], 0
	; >>>>> Line:	61
	; >>>>> while (current != 0) { 
	jmp	L_DelayQueue_20
L_DelayQueue_19:
	; >>>>> Line:	62
	; >>>>> sumCount += current->delayCount; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	add	word [bp-4], ax
	; >>>>> Line:	63
	; >>>>> if (tcb->delayCount < sumCount) { 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-4]
	cmp	ax, word [si]
	jbe	L_DelayQueue_22
	; >>>>> Line:	64
	; >>>>> tcb->prev = current->prev; 
	mov	si, word [bp-2]
	add	si, 12
	mov	di, word [bp+4]
	add	di, 12
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	65
	; >>>>> tcb->next = current; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	66
	; >>>>> if (current == delayQueue.head) { 
	mov	ax, word [delayQueue]
	cmp	ax, word [bp-2]
	jne	L_DelayQueue_23
	; >>>>> Line:	67
	; >>>>> delayQueue.head  
	mov	ax, word [bp+4]
	mov	word [delayQueue], ax
	; >>>>> Line:	68
	; >>>>> current->prev->next = tcb; 
	mov	si, word [bp-2]
	add	si, 12
	mov	si, word [si]
	add	si, 10
	mov	word [si], ax
L_DelayQueue_23:
	; >>>>> Line:	70
	; >>>>> current->prev = tcb; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	71
	; >>>>> delayQueue.size++; 
	inc	word [(2+delayQueue)]
	; >>>>> Line:	72
	; >>>>> tcb->delayCount = tcb->delayCount - sumCount; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	sub	ax, word [bp-4]
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], ax
	; >>>>> Line:	73
	; >>>>> return; 
	jmp	L_DelayQueue_17
L_DelayQueue_22:
	; >>>>> Line:	75
	; >>>>> if (current->next == 0) { 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_DelayQueue_24
	; >>>>> Line:	76
	; >>>>> current->next = tcb; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	77
	; >>>>> tcb->prev = current; 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	78
	; >>>>> tcb->next = 0; 
	mov	si, word [bp+4]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	79
	; >>>>> delayQueue.size++; 
	inc	word [(2+delayQueue)]
	; >>>>> Line:	80
	; >>>>> tcb->delayCount = tcb->delayCount - sumCount; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	sub	ax, word [bp-4]
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], ax
	; >>>>> Line:	81
	; >>>>> return; 
	jmp	L_DelayQueue_17
L_DelayQueue_24:
	; >>>>> Line:	83
	; >>>>> current = current->next; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-2], ax
L_DelayQueue_20:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_DelayQueue_19
L_DelayQueue_21:
L_DelayQueue_17:
	mov	sp, bp
	pop	bp
	ret
L_DelayQueue_14:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_DelayQueue_15
; Generated by c86 (BYU-NASM) 5.1 (beta) from lab4c_app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_lab4c_app_2:
	DB	"Starting kernel...",0xA,0
L_lab4c_app_1:
	DB	"Creating task...",0xA,0
	ALIGN	2
main:
	; >>>>> Line:	20
	; >>>>> { 
	jmp	L_lab4c_app_3
L_lab4c_app_4:
	; >>>>> Line:	21
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	23
	; >>>>> printString("Creating task...\n"); 
	mov	ax, L_lab4c_app_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	24
	; >>>>> YKNewTask(Task, (void *) &Ta 
	xor	al, al
	push	ax
	mov	ax, (TaskStack+512)
	push	ax
	mov	ax, Task
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	26
	; >>>>> printString("Starting kernel...\n"); 
	mov	ax, L_lab4c_app_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	27
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab4c_app_3:
	push	bp
	mov	bp, sp
	jmp	L_lab4c_app_4
L_lab4c_app_9:
	DB	" context switches! YKIdleCount is ",0
L_lab4c_app_8:
	DB	"Task running after ",0
L_lab4c_app_7:
	DB	"Delaying task...",0xA,0
L_lab4c_app_6:
	DB	"Task started.",0xA,0
	ALIGN	2
Task:
	; >>>>> Line:	31
	; >>>>> { 
	jmp	L_lab4c_app_10
L_lab4c_app_11:
	; >>>>> Line:	35
	; >>>>> printString("Task started.\n"); 
	mov	ax, L_lab4c_app_6
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	36
	; >>>>> while (1) 
	jmp	L_lab4c_app_13
L_lab4c_app_12:
	; >>>>> Line:	38
	; >>>>> printString("Delaying task...\n"); 
	mov	ax, L_lab4c_app_7
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	40
	; >>>>> YKDelayTask(2); 
	mov	ax, 2
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	42
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	43
	; >>>>> numCtxSwitches = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	44
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-2], ax
	; >>>>> Line:	45
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	46
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	48
	; >>>>> printString("Task running after "); 
	mov	ax, L_lab4c_app_8
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	49
	; >>>>> printUInt(numCtxSwitches); 
	push	word [bp-4]
	call	printUInt
	add	sp, 2
	; >>>>> Line:	50
	; >>>>> printSt 
	mov	ax, L_lab4c_app_9
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	51
	; >>>>> printUInt(idleCount); 
	push	word [bp-2]
	call	printUInt
	add	sp, 2
	; >>>>> Line:	52
	; >>>>> printString(".\n"); 
	mov	ax, (L_lab4c_app_1+15)
	push	ax
	call	printString
	add	sp, 2
L_lab4c_app_13:
	jmp	L_lab4c_app_12
L_lab4c_app_14:
	mov	sp, bp
	pop	bp
	ret
L_lab4c_app_10:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_lab4c_app_11
	ALIGN	2
TaskStack:
	TIMES	512 db 0
