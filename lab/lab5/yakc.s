; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKCtxSwCount:
	DW	0
YKIdleCount:
	DW	0
YKTickCounter:
	DW	0
L_yakc_1:
	DW	0
currentTask:
	DW	0
L_yakc_4:
	DW	0
	ALIGN	2
getYKCtxSwCount:
	; >>>>> Line:	22
	; >>>>> unsigned int getYKCtxSwCount() { 
	jmp	L_yakc_5
L_yakc_6:
	; >>>>> Line:	23
	; >>>>> return YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
L_yakc_7:
	mov	sp, bp
	pop	bp
	ret
L_yakc_5:
	push	bp
	mov	bp, sp
	jmp	L_yakc_6
	ALIGN	2
getYKIdleCount:
	; >>>>> Line:	26
	; >>>>> unsigned int getYKIdleCount() { 
	jmp	L_yakc_9
L_yakc_10:
	; >>>>> Line:	27
	; >>>>> return YKIdleCount; 
	mov	ax, word [YKIdleCount]
L_yakc_11:
	mov	sp, bp
	pop	bp
	ret
L_yakc_9:
	push	bp
	mov	bp, sp
	jmp	L_yakc_10
	ALIGN	2
setYKIdleCount:
	; >>>>> Line:	30
	; >>>>> void setYKIdleCount(int value) { 
	jmp	L_yakc_13
L_yakc_14:
	; >>>>> Line:	31
	; >>>>> YKIdleCount = value; 
	mov	ax, word [bp+4]
	mov	word [YKIdleCount], ax
	mov	sp, bp
	pop	bp
	ret
L_yakc_13:
	push	bp
	mov	bp, sp
	jmp	L_yakc_14
	ALIGN	2
setYKCtxSwCount:
	; >>>>> Line:	34
	; >>>>> void setYKCtxSwCount(int value) { 
	jmp	L_yakc_16
L_yakc_17:
	; >>>>> Line:	35
	; >>>>> YKCtxSwCount = value; 
	mov	ax, word [bp+4]
	mov	word [YKCtxSwCount], ax
	mov	sp, bp
	pop	bp
	ret
L_yakc_16:
	push	bp
	mov	bp, sp
	jmp	L_yakc_17
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	39
	; >>>>> void YKEnterISR(void) { 
	jmp	L_yakc_19
L_yakc_20:
	; >>>>> Line:	40
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	41
	; >>>>> ISRCallDepth++; 
	inc	word [L_yakc_1]
	; >>>>> Line:	42
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_19:
	push	bp
	mov	bp, sp
	jmp	L_yakc_20
	ALIGN	2
YKExitISR:
	; >>>>> Line:	45
	; >>>>> void YKExitISR(void) { 
	jmp	L_yakc_22
L_yakc_23:
	; >>>>> Line:	46
	; >>>>> YKEnterMutex( 
	call	YKEnterMutex
	; >>>>> Line:	47
	; >>>>> ISRCallDepth--; 
	dec	word [L_yakc_1]
	; >>>>> Line:	48
	; >>>>> if (ISRCallDepth == 0) { 
	mov	ax, word [L_yakc_1]
	test	ax, ax
	jne	L_yakc_24
	; >>>>> Line:	49
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	50
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_24:
	mov	sp, bp
	pop	bp
	ret
L_yakc_22:
	push	bp
	mov	bp, sp
	jmp	L_yakc_23
	ALIGN	2
YKGetISRCallDepth:
	; >>>>> Line:	54
	; >>>>> unsigned int YKGetISRCallDepth(void) { 
	jmp	L_yakc_26
L_yakc_27:
	; >>>>> Line:	56
	; >>>>> return ISRCallDepth; 
	mov	ax, word [L_yakc_1]
L_yakc_28:
	mov	sp, bp
	pop	bp
	ret
L_yakc_26:
	push	bp
	mov	bp, sp
	jmp	L_yakc_27
	ALIGN	2
YKInitialize:
	; >>>>> Line:	59
	; >>>>> void YKInitialize(void) { 
	jmp	L_yakc_30
L_yakc_31:
	; >>>>> Line:	61
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	64
	; >>>>> initializePriorityQueue(&readyQueue); 
	mov	ax, readyQueue
	push	ax
	call	initializePriorityQueue
	add	sp, 2
	; >>>>> Line:	65
	; >>>>> initializeDelayQueue(); 
	call	initializeDelayQueue
	; >>>>> Line:	68
	; >>>>> taskBlock.nextFreeTCB == 0; 
	mov	ax, word [(154+taskBlock)]
	test	ax, ax
	je	L_yakc_32
	xor	ax, ax
	jmp	L_yakc_33
L_yakc_32:
	mov	ax, 1
L_yakc_33:
	; >>>>> Line:	72
	; >>>>> YKNewTask(YKIdleTask, &idleTaskStack[512], 100); 
	mov	al, 100
	push	ax
	mov	ax, (L_yakc_3+1024)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	75
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_34:
	; >>>>> Line:	76
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yakc_30:
	push	bp
	mov	bp, sp
	jmp	L_yakc_31
	ALIGN	2
YKScheduler:
	; >>>>> Line:	80
	; >>>>> void YKScheduler(void) { 
	jmp	L_yakc_36
L_yakc_37:
	; >>>>> Line:	83
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	84
	; >>>>> if (kernelState == K_BLOCKED) return; 
	mov	ax, word [L_yakc_4]
	test	ax, ax
	jne	L_yakc_38
	; >>>>> Line:	84
	; >>>>> if (kernelState == K_BLOCKED) return; 
	jmp	L_yakc_39
L_yakc_38:
	; >>>>> Line:	85
	; >>>>> readyTask = peekPriorityQueue(&ready 
	mov	ax, readyQueue
	push	ax
	call	peekPriorityQueue
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	86
	; >>>>> if (readyTask == 0) exit(2); 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_40
	; >>>>> Line:	86
	; >>>>> if (readyTask == 0) exit(2); 
	mov	al, 2
	push	ax
	call	exit
	add	sp, 2
L_yakc_40:
	; >>>>> Line:	87
	; >>>>> if (readyTask != currentTask) { 
	mov	ax, word [currentTask]
	cmp	ax, word [bp-2]
	je	L_yakc_41
	; >>>>> Line:	88
	; >>>>> currentTask = readyTask; 
	mov	ax, word [bp-2]
	mov	word [currentTask], ax
	; >>>>> Line:	89
	; >>>>> currentTask->state = T_READY; 
	mov	si, word [currentTask]
	add	si, 6
	mov	word [si], 1
	; >>>>> Line:	90
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	91
	; >>>>> readyTask->state = T_RUNNING; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 2
	; >>>>> Line:	92
	; >>>>> YKDispatcher(readyTask); 
	push	word [bp-2]
	call	YKDispatcher
	add	sp, 2
	; >>>>> Line:	93
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	94
	; >>>>> return; 
	jmp	L_yakc_39
L_yakc_41:
	; >>>>> Line:	96
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_39:
	; >>>>> Line:	97
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yakc_36:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_37
	ALIGN	2
YKNewTask:
	; >>>>> Line:	100
	; >>>>> void YKNewTask(void (*task)(void), void* taskStack, unsigned char priority) { 
	jmp	L_yakc_43
L_yakc_44:
	; >>>>> Line:	105
	; >>>>> newTask = getNewTCB(); 
	call	getNewTCB
	mov	word [bp-2], ax
	; >>>>> Line:	106
	; >>>>> if (newTask == 0) exit(1); 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_45
	; >>>>> Line:	106
	; >>>>> if (newTask == 0) exit(1); 
	mov	al, 1
	push	ax
	call	exit
	add	sp, 2
L_yakc_45:
	; >>>>> Line:	109
	; >>>>> newTask->tid = 0; 
	mov	si, word [bp-2]
	mov	word [si], 0
	; >>>>> Line:	110
	; >>>>> newTask->priority = priority; 
	mov	si, word [bp-2]
	add	si, 2
	mov	al, byte [bp+8]
	mov	byte [si], al
	; >>>>> Line:	111
	; >>>>> newTask->stackPointer = ((void*)((int*) taskSt 
	mov	ax, word [bp+6]
	sub	ax, 24
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	112
	; >>>>> newTask->state = T_READY; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 1
	; >>>>> Line:	113
	; >>>>> newTask->delayCount = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	114
	; >>>>> newTask->next = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	115
	; >>>>> newTask->prev = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	118
	; >>>>> asm("push bx"); 
	push bx
	; >>>>> Line:	119
	; >>>>> asm("push cx"); 
	push cx
	; >>>>> Line:	120
	; >>>>> asm("mov bx, [bp+6]"); 
	mov bx, [bp+6]
	; >>>>> Line:	121
	; >>>>> asm("mov cx, [bp+4]"); 
	mov cx, [bp+4]
	; >>>>> Line:	122
	; >>>>> asm("mov [bx-2], word 0x0200"); 
	mov [bx-2], word 0x0200
	; >>>>> Line:	123
	; >>>>> asm("mov [bx-4], word 0x0"); 
	mov [bx-4], word 0x0
	; >>>>> Line:	124
	; >>>>> asm("mov [bx-6], cx"); 
	mov [bx-6], cx
	; >>>>> Line:	125
	; >>>>> asm("pop cx"); 
	pop cx
	; >>>>> Line:	126
	; >>>>> asm("pop bx"); 
	pop bx
	; >>>>> Line:	128
	; >>>>> insertPriorityQueue(&readyQueue, newTask); 
	push	word [bp-2]
	mov	ax, readyQueue
	push	ax
	call	insertPriorityQueue
	add	sp, 4
	; >>>>> Line:	129
	; >>>>> asm("int 0x20"); 
	int 0x20
L_yakc_46:
	; >>>>> Line:	130
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yakc_43:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_44
	ALIGN	2
getNewTCB:
	; >>>>> Line:	134
	; >>>>> TCB* getNewTCB(void) { 
	jmp	L_yakc_48
L_yakc_49:
	; >>>>> Line:	137
	; >>>>> if (taskBlock.nextFreeTCB < 10 + 1) { 
	cmp	word [(154+taskBlock)], 11
	jae	L_yakc_50
	; >>>>> Line:	138
	; >>>>> task = &taskBlock.TCBPool[taskBlock.nextFre 
	mov	ax, word [(154+taskBlock)]
	mov	cx, 14
	imul	cx
	add	ax, taskBlock
	mov	word [bp-2], ax
	; >>>>> Line:	139
	; >>>>> taskBlock.nextFreeTCB++; 
	inc	word [(154+taskBlock)]
	; >>>>> Line:	140
	; >>>>> return task; 
	mov	ax, word [bp-2]
	jmp	L_yakc_51
	jmp	L_yakc_52
L_yakc_50:
	; >>>>> Line:	142
	; >>>>> return 0; 
	xor	ax, ax
L_yakc_52:
L_yakc_51:
	mov	sp, bp
	pop	bp
	ret
L_yakc_48:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_49
	ALIGN	2
getNewSem:
	; >>>>> Line:	147
	; >>>>> YKSEM* getNewSem(void) { 
	jmp	L_yakc_54
L_yakc_55:
	; >>>>> Line:	150
	; >>>>> if (semBlock.nextFreeSem < 10) { 
	cmp	word [(80+L_yakc_2)], 10
	jae	L_yakc_56
	; >>>>> Line:	151
	; >>>>> semaphore = &semBlock.SemPool[semBlock.nextFreeSem]; 
	mov	ax, word [(80+L_yakc_2)]
	mov	cx, 3
	shl	ax, cl
	add	ax, L_yakc_2
	mov	word [bp-2], ax
	; >>>>> Line:	152
	; >>>>> semBlock.nextFreeSem++; 
	inc	word [(80+L_yakc_2)]
	; >>>>> Line:	153
	; >>>>> return semaphore; 
	mov	ax, word [bp-2]
	jmp	L_yakc_57
	jmp	L_yakc_58
L_yakc_56:
	; >>>>> Line:	155
	; >>>>> return 0; 
	xor	ax, ax
L_yakc_58:
L_yakc_57:
	mov	sp, bp
	pop	bp
	ret
L_yakc_54:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_55
	ALIGN	2
YKRun:
	; >>>>> Line:	160
	; >>>>> void YKRun(void) { 
	jmp	L_yakc_60
L_yakc_61:
	; >>>>> Line:	162
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	163
	; >>>>> kernelState = K_RUNNING; 
	mov	word [L_yakc_4], 1
	; >>>>> Line:	165
	; >>>>> YKScheduler(); 
	call	YKScheduler
	; >>>>> Line:	166
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_62:
	; >>>>> Line:	167
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yakc_60:
	push	bp
	mov	bp, sp
	jmp	L_yakc_61
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	171
	; >>>>> void YKDelayTask(unsigned int count) { 
	jmp	L_yakc_64
L_yakc_65:
	; >>>>> Line:	175
	; >>>>> if (count == 0) return; 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_66
	; >>>>> Line:	175
	; >>>>> if (count == 0) return; 
	jmp	L_yakc_67
L_yakc_66:
	; >>>>> Line:	177
	; >>>>> delayedTask = removeP 
	mov	ax, readyQueue
	push	ax
	call	removePriorityQueue
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	178
	; >>>>> delayedTask->state = T_BLOCKED; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	179
	; >>>>> delayedTask->delayCount = count; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	180
	; >>>>> insertDelayQueue(delayedTask); 
	push	word [bp-2]
	call	insertDelayQueue
	add	sp, 2
	; >>>>> Line:	181
	; >>>>> asm("int 0x20"); 
	int 0x20
L_yakc_67:
	; >>>>> Line:	182
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yakc_64:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_65
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	186
	; >>>>> void YKTickHandler(void) { 
	jmp	L_yakc_69
L_yakc_70:
	; >>>>> Line:	188
	; >>>>> tickClock(); 
	call	tickClock
	mov	sp, bp
	pop	bp
	ret
L_yakc_69:
	push	bp
	mov	bp, sp
	jmp	L_yakc_70
	ALIGN	2
readyQueue:
	TIMES	6 db 0
delayQueue:
	TIMES	4 db 0
taskBlock:
	TIMES	156 db 0
L_yakc_2:
	TIMES	82 db 0
L_yakc_3:
	TIMES	1024 db 0
