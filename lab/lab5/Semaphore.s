; Generated by c86 (BYU-NASM) 5.1 (beta) from Semaphore.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	7
	; >>>>> YKSEM* YKSemCreate(int initialValue) { 
	jmp	L_Semaphore_1
L_Semaphore_2:
	; >>>>> Line:	10
	; >>>>> newSemaphore = getNewSem(); 
	call	getNewSem
	mov	word [bp-2], ax
	; >>>>> Line:	11
	; >>>>> if (newSemaphore == 0) exit(3); 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_Semaphore_3
	; >>>>> Line:	11
	; >>>>> if (newSemaphore == 0) exit(3); 
	mov	al, 3
	push	ax
	call	exit
	add	sp, 2
L_Semaphore_3:
	; >>>>> Line:	13
	; >>>>> initializePriorityQueue(&(newSemaphore->queue)); 
	mov	ax, word [bp-2]
	add	ax, 2
	push	ax
	call	initializePriorityQueue
	add	sp, 2
	; >>>>> Line:	14
	; >>>>> newSemaphore->value = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	16
	; >>>>> return newSemaphore; 
	mov	ax, word [bp-2]
L_Semaphore_4:
	mov	sp, bp
	pop	bp
	ret
L_Semaphore_1:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_Semaphore_2
	ALIGN	2
YKSemPend:
	; >>>>> Line:	20
	; >>>>> void YKSemPend(YKSEM* semaphore) { 
	jmp	L_Semaphore_6
L_Semaphore_7:
	; >>>>> Line:	24
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	25
	; >>>>> if (semaphore->value < 1) { 
	mov	si, word [bp+4]
	cmp	word [si], 1
	jge	L_Semaphore_8
	; >>>>> Line:	26
	; >>>>> semaphore->value--; 
	dec	word [si]
	; >>>>> Line:	27
	; >>>>> runningTask = removePriorityQueue(&readyQueue); 
	mov	ax, readyQueue
	push	ax
	call	removePriorityQueue
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	28
	; >>>>> runningTask->state = T_BLOCKED; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	29
	; >>>>> insertPriorityQueue((&(semaphore->queue)), runningTask); 
	push	word [bp-2]
	mov	ax, word [bp+4]
	add	ax, 2
	push	ax
	call	insertPriorityQueue
	add	sp, 4
	; >>>>> Line:	30
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	31
	; >>>>> asm("int 0x20"); 
	int 0x20
	; >>>>> Line:	32
	; >>>>> return; 
	jmp	L_Semaphore_9
	jmp	L_Semaphore_10
L_Semaphore_8:
	; >>>>> Line:	35
	; >>>>> semaphore->value--; 
	mov	si, word [bp+4]
	dec	word [si]
	; >>>>> Line:	36
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_Semaphore_10:
	; >>>>> Line:	37
	; >>>>> return; 
L_Semaphore_9:
	mov	sp, bp
	pop	bp
	ret
L_Semaphore_6:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_Semaphore_7
	ALIGN	2
YKSemPost:
	; >>>>> Line:	42
	; >>>>> void YKSemPost(YKSEM* semaphore) { 
	jmp	L_Semaphore_12
L_Semaphore_13:
	; >>>>> Line:	46
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	47
	; >>>>> semaphore->value++; 
	mov	si, word [bp+4]
	inc	word [si]
	; >>>>> Line:	48
	; >>>>> readyTask = removePriorityQueue(&(semaphore->queue)); 
	mov	ax, word [bp+4]
	add	ax, 2
	push	ax
	call	removePriorityQueue
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	49
	; >>>>> if (readyTask == 0) { 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_Semaphore_14
	; >>>>> Line:	50
	; >>>>> YKE 
	call	YKExitMutex
	; >>>>> Line:	51
	; >>>>> return; 
	jmp	L_Semaphore_15
L_Semaphore_14:
	; >>>>> Line:	53
	; >>>>> readyTask->state = T_READY; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 1
	; >>>>> Line:	54
	; >>>>> insertPriorityQueue(&readyQueue, readyTask); 
	push	word [bp-2]
	mov	ax, readyQueue
	push	ax
	call	insertPriorityQueue
	add	sp, 4
	; >>>>> Line:	55
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	56
	; >>>>> if (YKGetISRCallDepth() == 0) { 
	call	YKGetISRCallDepth
	test	ax, ax
	jne	L_Semaphore_16
	; >>>>> Line:	57
	; >>>>> asm("int 0x20"); 
	int 0x20
L_Semaphore_16:
L_Semaphore_15:
	; >>>>> Line:	59
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_Semaphore_12:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_Semaphore_13
