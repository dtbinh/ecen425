; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
resetHandler:
	; >>>>> Line:	9
	; >>>>> void resetHandler() { 
	jmp	L_myinth_1
L_myinth_2:
	; >>>>> Line:	10
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_1:
	push	bp
	mov	bp, sp
	jmp	L_myinth_2
L_myinth_4:
	DB	0xA,"Tick ",0
	ALIGN	2
tickHandler:
	; >>>>> Line:	13
	; >>>>> void tickHandler() { 
	jmp	L_myinth_5
L_myinth_6:
	; >>>>> Line:	17
	; >>>>> YKEnterMutex(); 
	mov	word [bp-2], 0
	; >>>>> Line:	17
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	18
	; >>>>> localCounter = ++YKTickCounter; 
	mov	ax, word [YKTickCounter]
	inc	ax
	mov	word [YKTickCounter], ax
	mov	word [bp-2], ax
	; >>>>> Line:	19
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	20
	; >>>>> printString("\nTick "); 
	mov	ax, L_myinth_4
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	21
	; >>>>> printInt(localCounter); 
	push	word [bp-2]
	call	printInt
	add	sp, 2
	; >>>>> Line:	22
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	23
	; >>>>> tickClock(); 
	call	tickClock
L_myinth_7:
	; >>>>> Line:	24
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_myinth_5:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_6
L_myinth_12:
	DB	") IGNORED",0xA,0
L_myinth_11:
	DB	0xA,"KEYPRESS (",0
L_myinth_10:
	DB	0xA,"DELAY COMPLETE",0xA,0
L_myinth_9:
	DB	0xA,"DELAY KEY PRESSED",0xA,0
	ALIGN	2
keyboardHandler:
	; >>>>> Line:	28
	; >>>>> void keyboardHandler() { 
	jmp	L_myinth_13
L_myinth_14:
	; >>>>> Line:	32
	; >>>>> if (KeyBuffer == 'd') { 
	cmp	word [KeyBuffer], 100
	jne	L_myinth_15
	; >>>>> Line:	33
	; >>>>> printString("\nDELAY KEY PRESSED\n"); 
	mov	ax, L_myinth_9
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	34
	; >>>>> for (i = 0; i < 5000; i++); 
	mov	word [bp-2], 0
	jmp	L_myinth_17
L_myinth_16:
L_myinth_19:
	inc	word [bp-2]
L_myinth_17:
	cmp	word [bp-2], 5000
	jl	L_myinth_16
L_myinth_18:
	; >>>>> Line:	35
	; >>>>> printString("\nD 
	mov	ax, L_myinth_10
	push	ax
	call	printString
	add	sp, 2
	jmp	L_myinth_20
L_myinth_15:
	; >>>>> Line:	36
	; >>>>> } else if (KeyBuffer == 'p') { 
	cmp	word [KeyBuffer], 112
	jne	L_myinth_21
	; >>>>> Line:	37
	; >>>>> YKSemPost(NSemPtr); 
	push	word [NSemPtr]
	call	YKSemPost
	add	sp, 2
	jmp	L_myinth_22
L_myinth_21:
	; >>>>> Line:	39
	; >>>>> printString("\nKEYPRESS ("); 
	mov	ax, L_myinth_11
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	40
	; >>>>> printChar((char) KeyBuffer); 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	41
	; >>>>> printString(") IGNORED\n"); 
	mov	ax, L_myinth_12
	push	ax
	call	printString
	add	sp, 2
L_myinth_22:
L_myinth_20:
L_myinth_23:
	; >>>>> Line:	44
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_myinth_13:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_14
