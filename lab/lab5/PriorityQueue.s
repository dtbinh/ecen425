; Generated by c86 (BYU-NASM) 5.1 (beta) from PriorityQueue.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
initializePriorityQueue:
	; >>>>> Line:	5
	; >>>>> void initializePriorityQueue(PriorityQueue* queue) { 
	jmp	L_PriorityQueue_1
L_PriorityQueue_2:
	; >>>>> Line:	6
	; >>>>> queue->size = 0; 
	mov	si, word [bp+4]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	7
	; >>>>> queue->head = 0; 
	mov	si, word [bp+4]
	mov	word [si], 0
	; >>>>> Line:	8
	; >>>>> queue->tail = 0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	word [si], 0
	mov	sp, bp
	pop	bp
	ret
L_PriorityQueue_1:
	push	bp
	mov	bp, sp
	jmp	L_PriorityQueue_2
	ALIGN	2
insertPriorityQueue:
	; >>>>> Line:	11
	; >>>>> void insertPriorityQueue(PriorityQueue* queue, TCB* tcb) { 
	jmp	L_PriorityQueue_4
L_PriorityQueue_5:
	; >>>>> Line:	15
	; >>>>> if(tcb == 0) return; 
	mov	ax, word [bp+6]
	test	ax, ax
	jne	L_PriorityQueue_6
	; >>>>> Line:	15
	; >>>>> if(tcb == 0) return; 
	jmp	L_PriorityQueue_7
L_PriorityQueue_6:
	; >>>>> Line:	18
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	19
	; >>>>> if (queue->size == 0) { 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_PriorityQueue_8
	; >>>>> Line:	20
	; >>>>> queue->head = tcb; 
	mov	si, word [bp+4]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	21
	; >>>>> queue->tail = tcb; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	22
	; >>>>> > 
	mov	si, word [bp+6]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	23
	; >>>>> tcb->prev = 0; 
	mov	si, word [bp+6]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	24
	; >>>>> queue->size = 1; 
	mov	si, word [bp+4]
	add	si, 4
	mov	word [si], 1
	; >>>>> Line:	25
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	26
	; >>>>> return; 
	jmp	L_PriorityQueue_7
L_PriorityQueue_8:
	; >>>>> Line:	30
	; >>>>> if (queue->size == 1) { 
	mov	si, word [bp+4]
	add	si, 4
	cmp	word [si], 1
	jne	L_PriorityQueue_9
	; >>>>> Line:	31
	; >>>>> if (queue->head->priority < tcb->priority) { 
	mov	si, word [bp+4]
	mov	si, word [si]
	add	si, 2
	mov	di, word [bp+6]
	add	di, 2
	mov	al, byte [di]
	cmp	al, byte [si]
	jbe	L_PriorityQueue_10
	; >>>>> Line:	32
	; >>>>> queue->head->next = tcb; 
	mov	si, word [bp+4]
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	33
	; >>>>> tcb->prev = queue->head; 
	mov	si, word [bp+4]
	mov	di, word [bp+6]
	add	di, 12
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	34
	; >>>>> tcb->next = 0; 
	mov	si, word [bp+6]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	35
	; >>>>> queue->tail = tcb; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	36
	; >>>>> queue->size++; 
	mov	si, word [bp+4]
	add	si, 4
	inc	word [si]
	; >>>>> Line:	37
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	38
	; >>>>> return; 
	jmp	L_PriorityQueue_7
	jmp	L_PriorityQueue_11
L_PriorityQueue_10:
	; >>>>> Line:	40
	; >>>>> tcb->next = queue->head; 
	mov	si, word [bp+4]
	mov	di, word [bp+6]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	41
	; >>>>> tcb->prev = 0; 
	mov	si, word [bp+6]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	42
	; >>>>> queue->tail->prev = tcb; 
	mov	si, word [bp+4]
	add	si, 2
	mov	si, word [si]
	add	si, 12
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	43
	; >>>>> queue->head = tcb; 
	mov	si, word [bp+4]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	44
	; >>>>> queue->size++; 
	mov	si, word [bp+4]
	add	si, 4
	inc	word [si]
	; >>>>> Line:	45
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	46
	; >>>>> return; 
	jmp	L_PriorityQueue_7
L_PriorityQueue_11:
L_PriorityQueue_9:
	; >>>>> Line:	51
	; >>>>> temp = queue->head; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	52
	; >>>>> while (temp != 0) { 
	jmp	L_PriorityQueue_13
L_PriorityQueue_12:
	; >>>>> Line:	53
	; >>>>> if (temp-> 
	mov	si, word [bp-2]
	add	si, 2
	mov	di, word [bp+6]
	add	di, 2
	mov	al, byte [di]
	cmp	al, byte [si]
	jae	L_PriorityQueue_15
	; >>>>> Line:	54
	; >>>>> tcb->next = temp; 
	mov	si, word [bp+6]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	55
	; >>>>> tcb->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 12
	mov	di, word [bp+6]
	add	di, 12
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	56
	; >>>>> if (temp == queue->head) { 
	mov	si, word [bp+4]
	mov	ax, word [si]
	cmp	ax, word [bp-2]
	jne	L_PriorityQueue_16
	; >>>>> Line:	57
	; >>>>> queue->head = tcb; 
	mov	ax, word [bp+6]
	mov	word [si], ax
	jmp	L_PriorityQueue_17
L_PriorityQueue_16:
	; >>>>> Line:	59
	; >>>>> temp->prev->next = tcb; 
	mov	si, word [bp-2]
	add	si, 12
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp+6]
	mov	word [si], ax
L_PriorityQueue_17:
	; >>>>> Line:	61
	; >>>>> temp->prev = tcb; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	62
	; >>>>> queue->size++; 
	mov	si, word [bp+4]
	add	si, 4
	inc	word [si]
	; >>>>> Line:	63
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	64
	; >>>>> return; 
	jmp	L_PriorityQueue_7
L_PriorityQueue_15:
	; >>>>> Line:	66
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-2], ax
L_PriorityQueue_13:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_PriorityQueue_12
L_PriorityQueue_14:
	; >>>>> Line:	70
	; >>>>> queue->tail->next = tcb; 
	mov	si, word [bp+4]
	add	si, 2
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	71
	; >>>>> tcb->prev = queue->tail; 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [bp+6]
	add	di, 12
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	72
	; >>>>> queue->tail = tcb; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	73
	; >>>>> tcb->next = 0; 
	mov	si, word [bp+6]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	74
	; >>>>> queue->size++; 
	mov	si, word [bp+4]
	add	si, 4
	inc	word [si]
	; >>>>> Line:	75
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_PriorityQueue_7:
	; >>>>> Line:	76
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_PriorityQueue_4:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_PriorityQueue_5
	ALIGN	2
peekPriorityQueue:
	; >>>>> Line:	80
	; >>>>> TCB* peekPriorityQueue(PriorityQueue* queue) { 
	jmp	L_PriorityQueue_19
L_PriorityQueue_20:
	; >>>>> Line:	82
	; >>>>> return queue->head; 
	mov	si, word [bp+4]
	mov	ax, word [si]
L_PriorityQueue_21:
	mov	sp, bp
	pop	bp
	ret
L_PriorityQueue_19:
	push	bp
	mov	bp, sp
	jmp	L_PriorityQueue_20
	ALIGN	2
removePriorityQueue:
	; >>>>> Line:	86
	; >>>>> Value; 
	jmp	L_PriorityQueue_23
L_PriorityQueue_24:
	; >>>>> Line:	91
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	92
	; >>>>> if (queue->size == 0) { 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_PriorityQueue_25
	; >>>>> Line:	93
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	94
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_PriorityQueue_26
L_PriorityQueue_25:
	; >>>>> Line:	98
	; >>>>> if (queue->size == 1) { 
	mov	si, word [bp+4]
	add	si, 4
	cmp	word [si], 1
	jne	L_PriorityQueue_27
	; >>>>> Line:	99
	; >>>>> retValue = queue->head; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	100
	; >>>>> retValue->next = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	101
	; >>>>> retValue->prev = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	102
	; >>>>> queue->size--; 
	mov	si, word [bp+4]
	add	si, 4
	dec	word [si]
	; >>>>> Line:	103
	; >>>>> queue->head = 0; 
	mov	si, word [bp+4]
	mov	word [si], 0
	; >>>>> Line:	104
	; >>>>> queue->tail = 0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	105
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	106
	; >>>>> return retValue; 
	mov	ax, word [bp-2]
	jmp	L_PriorityQueue_26
L_PriorityQueue_27:
	; >>>>> Line:	110
	; >>>>> retValue = queue->head; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	111
	; >>>>> queue->head = queue->head->next; 
	mov	si, word [bp+4]
	mov	si, word [si]
	add	si, 10
	mov	di, word [bp+4]
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	112
	; >>>>> queue->head->prev = 0; 
	mov	si, word [bp+4]
	mov	si, word [si]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	113
	; >>>>> queue->size--; 
	mov	si, word [bp+4]
	add	si, 4
	dec	word [si]
	; >>>>> Line:	114
	; >>>>> retValue->next = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	115
	; >>>>> retValue->prev = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	116
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	117
	; >>>>> return retValue; 
	mov	ax, word [bp-2]
L_PriorityQueue_26:
	mov	sp, bp
	pop	bp
	ret
L_PriorityQueue_23:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_PriorityQueue_24
	ALIGN	2
printPriorityQueue:
	; >>>>> Line:	121
	; >>>>> void printPriorityQueue(Priority 
	jmp	L_PriorityQueue_29
L_PriorityQueue_30:
	; >>>>> Line:	124
	; >>>>> while (current != 0) { 
	jmp	L_PriorityQueue_32
L_PriorityQueue_31:
	; >>>>> Line:	125
	; >>>>> printInt(current->priority); 
	mov	si, word [bp-2]
	add	si, 2
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	126
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	127
	; >>>>> current = current->next; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-2], ax
L_PriorityQueue_32:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_PriorityQueue_31
L_PriorityQueue_33:
	mov	sp, bp
	pop	bp
	ret
L_PriorityQueue_29:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_PriorityQueue_30
